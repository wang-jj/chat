package com.example.dell.chat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.chat.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, int.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property Image_path = new Property(3, String.class, "image_path", false, "IMAGE_PATH");
        public final static Property School = new Property(4, String.class, "school", false, "SCHOOL");
        public final static Property Gender = new Property(5, int.class, "gender", false, "GENDER");
        public final static Property User_motto = new Property(6, String.class, "user_motto", false, "USER_MOTTO");
        public final static Property Picture_path1 = new Property(7, String.class, "picture_path1", false, "PICTURE_PATH1");
        public final static Property Picture_path2 = new Property(8, String.class, "picture_path2", false, "PICTURE_PATH2");
        public final static Property Picture_path3 = new Property(9, String.class, "picture_path3", false, "PICTURE_PATH3");
        public final static Property Password = new Property(10, String.class, "password", false, "PASSWORD");
        public final static Property Birthday = new Property(11, String.class, "birthday", false, "BIRTHDAY");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: user_id
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"IMAGE_PATH\" TEXT," + // 3: image_path
                "\"SCHOOL\" TEXT," + // 4: school
                "\"GENDER\" INTEGER NOT NULL ," + // 5: gender
                "\"USER_MOTTO\" TEXT," + // 6: user_motto
                "\"PICTURE_PATH1\" TEXT," + // 7: picture_path1
                "\"PICTURE_PATH2\" TEXT," + // 8: picture_path2
                "\"PICTURE_PATH3\" TEXT," + // 9: picture_path3
                "\"PASSWORD\" TEXT," + // 10: password
                "\"BIRTHDAY\" TEXT);"); // 11: birthday
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String image_path = entity.getImage_path();
        if (image_path != null) {
            stmt.bindString(4, image_path);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(5, school);
        }
        stmt.bindLong(6, entity.getGender());
 
        String user_motto = entity.getUser_motto();
        if (user_motto != null) {
            stmt.bindString(7, user_motto);
        }
 
        String picture_path1 = entity.getPicture_path1();
        if (picture_path1 != null) {
            stmt.bindString(8, picture_path1);
        }
 
        String picture_path2 = entity.getPicture_path2();
        if (picture_path2 != null) {
            stmt.bindString(9, picture_path2);
        }
 
        String picture_path3 = entity.getPicture_path3();
        if (picture_path3 != null) {
            stmt.bindString(10, picture_path3);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(12, birthday);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String image_path = entity.getImage_path();
        if (image_path != null) {
            stmt.bindString(4, image_path);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(5, school);
        }
        stmt.bindLong(6, entity.getGender());
 
        String user_motto = entity.getUser_motto();
        if (user_motto != null) {
            stmt.bindString(7, user_motto);
        }
 
        String picture_path1 = entity.getPicture_path1();
        if (picture_path1 != null) {
            stmt.bindString(8, picture_path1);
        }
 
        String picture_path2 = entity.getPicture_path2();
        if (picture_path2 != null) {
            stmt.bindString(9, picture_path2);
        }
 
        String picture_path3 = entity.getPicture_path3();
        if (picture_path3 != null) {
            stmt.bindString(10, picture_path3);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(12, birthday);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image_path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // school
            cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_motto
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picture_path1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // picture_path2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // picture_path3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // password
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // birthday
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getInt(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSchool(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.getInt(offset + 5));
        entity.setUser_motto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicture_path1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPicture_path2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicture_path3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBirthday(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
